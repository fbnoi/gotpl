package template

const NoPos Pos = 0

type Pos int

func (p Pos) Position() Pos {
	return p
}

type ASTNode interface {
}

// All expression nodes implement the Expr interface.
type Expr interface {
	ASTNode
	exprNode()
}

// All statement nodes implement the Stmt interface.
type Stmt interface {
	ASTNode
	stmtNode()
}

// All textext nodes implement the Text interface.
type Text interface {
	ASTNode
	textNode()
}

type AppendAble interface {
	Append(Stmt)
}

// ----------------------------------------------------------------------------
// Expressions

type (
	Ident struct {
		Name string // identifier name
	}

	BasicLit struct {
		Kind  int    // TYPE_NUMBER, TYPE_STRING
		Value string // literal string; e.g. 42, 0x7f, 3.14, 1e-9, 2.4i, 'a', etc.
	}

	OpLit struct {
		Op string // literal string; e.g. + - * /
	}

	// An IndexExpr node represents an expression followed by an index.
	IndexExpr struct {
		X     Expr // expression
		Index Expr // index expression
	}

	ParenExpr struct {
		Kind  int    // TYPE_OPERATOR
		Paren string // literal paren; (, )
	}

	// A CallExpr node represents an expression followed by an argument list.
	CallExpr struct {
		Fun  Expr      // function expression
		Args *ArgsExpr // function arguments; or nil
	}

	ArgsExpr struct {
		List []Expr // function arguments
	}

	// A BinaryExpr node represents a binary expression.
	BinaryExpr struct {
		X  Expr  // left operand
		Op OpLit // operator
		Y  Expr  // right operand
	}
)

// exprNode() ensures that only expression/type nodes can be
// assigned to an Expr.
//
func (*Ident) exprNode()      {}
func (*BasicLit) exprNode()   {}
func (*OpLit) exprNode()      {}
func (*IndexExpr) exprNode()  {}
func (*CallExpr) exprNode()   {}
func (*ArgsExpr) exprNode()   {}
func (*BinaryExpr) exprNode() {}

// ----------------------------------------------------------------------------
// Convenience functions for Idents

// NewIdent creates a new Ident without position.
// Useful for ASTs generated by code other than the Go parser.
//
func NewIdent(name string) *Ident { return &Ident{name} }

// ----------------------------------------------------------------------------
// Statements

type (

	// An AssignStmt node represents an assignment or
	// a short variable declaration.
	//
	AssignStmt struct {
		Lh  Expr   // Ident
		Tok string // assignment token, DEFINE
		Rh  Expr
	}

	// A SectionStmt node represents a braced statement list.
	SectionStmt struct {
		List []Stmt
	}

	// TextStmt
	TextStmt struct {
		Text Expr // text content BasicLit
	}

	ValueStmt struct {
		Tok Expr // assignment expr
	}

	SetStmt struct {
		Assign *AssignStmt
	}

	// An IfStmt node represents an if statement.
	IfStmt struct {
		Cond Expr // condition
		Else Stmt // else branch; or nil
		Body *SectionStmt
	}

	// A ForStmt represents a for statement.
	ForStmt struct {
		Init Stmt // initialization statement; or nil
		Cond Expr // condition; or nil
		Post Stmt // post iteration statement; or nil
		Body *SectionStmt
	}

	// A RangeStmt represents a for statement with a range clause.
	RangeStmt struct {
		Key, Value Expr // Key, Value may be nil
		Tok        string
		X          Expr // value to range over
		Body       *SectionStmt
	}

	//
	BlockStmt struct {
		Name *Ident       // name of block
		Body *SectionStmt // body of block
	}

	IncludeStmt struct {
		Ident  *BasicLit     // string of block name
		Params []*AssignStmt // parameters injected into block
	}

	ExtendStmt struct {
		Ident *BasicLit // string of block name
	}
)

// stmtNode() ensures that only statement nodes can be
// assigned to a Stmt.
//

func (*TextStmt) stmtNode()    {}
func (*ValueStmt) stmtNode()   {}
func (*AssignStmt) stmtNode()  {}
func (*SectionStmt) stmtNode() {}
func (*IfStmt) stmtNode()      {}
func (*ForStmt) stmtNode()     {}
func (*RangeStmt) stmtNode()   {}
func (*BlockStmt) stmtNode()   {}
func (*IncludeStmt) stmtNode() {}
func (*ExtendStmt) stmtNode()  {}
func (*SetStmt) stmtNode()     {}

// Append() ensures that only statement nodes can be
// assigned to a Stmt.
//
func (s *IfStmt) Append(x Stmt) {
	if s.Body == nil {
		s.Body = &SectionStmt{}
	}
	s.Body.List = append(s.Body.List, x)
}
func (s *ForStmt) Append(x Stmt) {
	if s.Body == nil {
		s.Body = &SectionStmt{}
	}
	s.Body.List = append(s.Body.List, x)
}
func (s *RangeStmt) Append(x Stmt) {
	if s.Body == nil {
		s.Body = &SectionStmt{}
	}
	s.Body.List = append(s.Body.List, x)
}
func (s *BlockStmt) Append(x Stmt) {
	if s.Body == nil {
		s.Body = &SectionStmt{}
	}
	s.Body.List = append(s.Body.List, x)
}
